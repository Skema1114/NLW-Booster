==> BACK-END (SERVER)

--> AULA 01

// instalar projeto com basico de detalhes
npm init -y

// instala o express
npm install express

// instalar a tipagem do express, o tsc precisa dessa tipagem
npm install @types/express -D

// instalar o ts-node, para que ele o entenda
npm install ts-node -D

// instalar o tsc
npm install typescript -D

// criar o arquivo de inicialização do typescript
npx tsc --init

// pacote que observa o codigo e restarta quando tem alterações
npm install ts-node-dev -D

--> AULA 02

// no express é preciso informar o tipo de requisição que será recebida (tipo 
  json)

// instalação do knex para criação do banco de dados e padronização para que 
  outros bancos aceitem as querys
npm install knex

// instalação do banco sqlite
npm install sqlite3

// cria a migrate linkando o arquivo de config do knex
// esse comando depois vai nos cripts com o nome de "knex:migrate"
npx knex --knexfile knexfile.ts migrate:latest

// comando para executar as seeds, adicionar nos scripts com nome de "knex:seed"
npx knex --knexfile knexfile.ts seed:run

** se precisar que a aplicação ja inicie com cadastros no banco de dados, 
  utiliza-se o SEEDS do KNEX.JS

** SERIALIZAÇÃO (SERIALIZABLE [eu acho]) é o processo de transformar os dados 
  de uma requisição para um novo formato mais acessivel para quem está as 
    requisitando 

## AULA 02: 1:30:30 como cdastrar dados com json envolvendo relacionamentos 
  entre tabelas

** TRANSACTION (padrao da comunidade => trx) do KNEX serve para quando precisa 
  executar mais de uma query e uma depende da outra, ou seja, se falhar uma nao 
    executa a outra

** DESACOPLAMENTO é a abstração de código para mais arquivos, ou PATTERNS que 
  é a estrutura de pastas

** SPREED OPERATIONS pegar todas informações de um objeto e retornar dentro de 
  outro objeto

** CORS define quais urls web terão acesso a api
// instalando cors
npm install cors

// instalando a typagem do cors, o typescript precisa disso
npm install @types/cors -D




==> FRONT-END (WEB)

--> AULA 01

// criando um projeto reactJS com template para tsc
npx create-react-app web --template=typescript

--> AULA 03

// instalando o pacote para ter acesso aos pacotes famosos de icones
npm install react-icons

// pacote para trabalhar com rotas
npm install react-router-dom

// tipagem do react-router-dom
npm install @types/react-router-dom -D

// precisei usar além do que foi mostrado, a tipagem do react-dom
npm install @types/react-dom -D

** o LINK do REACT-ROUTER-DOM faz com que, quando mudar a tela, ele nao 
  recarrega a aplicação inteira e sim dinamicamente (conceito de SPA, SINGLE 
    PAGE APLICATION [eu acho])

// instalando o leaflet e o react leaflet para utilização de mapas, já que o do google da um rolê
npm install leaflet react-leaflet

// instalando os tupes do react leaflet
npm install @types/react-leaflet -D

// permitir fazer requisições para o backend node
npm install axios

** SE CRIAR UM ARRAY OU OBJETO, PRECISA MANUALMENTE INFORMAR O TIPO DA VARIAVEL
   (INTERFACE NO CASO DO OBJETO)

** um GENERIC é um argumento de tipagem no typescript




==> MOBILE

--> AULA 04

// instalar o expo global na maquina
npm install -g expo-cli

// criar o app mobile
expo init mobile

** YOGA a ferramenta que converte o objeto css do React native para a estilização
  do android ou ios

 ** FRAGMENT (ou fragmento) é tipo uma view que não cria elemento na dom, mas 
  funciona como se fosse uma view

  // instalando o expo fonts que lançou agr pouco e já adicionando as fontes
    ubuntu e roboto pro app
  expo install expo-font @expo-google-fonts/ubuntu @expo-google-fonts/roboto 

## AULA 04: 33:33 improtando a biblioteca de appLoading do EXPO e utilizando

// instalando a biblioteca de navegações
npm install @react-navigation/native

// do react navigation, da documentação
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

// mais pra frente o diego explica essa lib
npm install @react-navigation/stack

// instalando pacote de compatibilidade com mapas
expo install react-native-maps

// componente para conseguir colocar svgs dentro do projeto
expo install react-native-svg



